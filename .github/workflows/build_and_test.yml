name: Pamplejuce

on:
  workflow_dispatch: # lets you run a build from the UI
#  push:
#  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
#  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

defaults:
  run:
    shell: bash

# jobs are run in parallel on different machines
# all steps run in series
jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
#          - name: Linux
#            os: ubuntu-22.04
#            pluginval-binary: ./pluginval

          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

#          - name: Windows
#            os: windows-latest
#            pluginval-binary: ./pluginval.exe

    steps:
      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      # Use clang on Linux so we don't introduce a 3rd compiler (Windows and macOS use MSVC and Clang)
      - name: Set up Clang
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1

      # This also starts up our "fake" display (Xvfb), needed for pluginval
      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb ninja-build
          sudo /usr/bin/Xvfb $DISPLAY &

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      # This block can be removed once 15.1 is default (JUCE requires it when building on macOS 14)
      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true # Get JUCE populated

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Import Certificates (macOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.name == 'macOS' }}
        with:
          keychain-password: ${{ secrets.KEYCHAIN_PASS }}
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

      - name: Import INST Certificates (macOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.name == 'macOS' }}
        with:
          keychain-password: ${{ secrets.KEYCHAIN_PASS }}
          create-keychain: false
          p12-file-base64: ${{ secrets.DEV_ID_INST_CERT }}
          p12-password: ${{ secrets.DEV_ID_INST_PASS }}

      - name: Configure
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.extra-flags }} .

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      #      - name: Test
      #        working-directory: ${{ env.BUILD_DIR }}
      #        run: ./Tests

      #      - name: Run Benchmarks
      #        working-directory: ${{ env.BUILD_DIR }}
      #        run: ./Benchmarks

      - name: Read in .env from CMake # see GitHubENV.cmake
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
          echo "STANDALONE_PATH=$ARTIFACTS_PATH/Standalone/${{ env.PRODUCT_NAME }}.app" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV
          echo "OUTPUT_BASE_FILENAME=${{ env.PRODUCT_NAME }}".-macOS-$VERSION" >> $GITHUB_ENV
          echo "OUTPUT_DIR=packaging" >> $GITHUB_ENV

      - name: Pluginval
        run: |
          curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_${{ matrix.name }}.zip"
          7z x pluginval_${{ matrix.name }}.zip
          ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"

      - name: Codesign (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          
          TMPDIR="./installer-tmp"
          mkdir -p $TMPDIR
          
          VST3="${{ env.PRODUCT_NAME }}.vst3" 
          AU="${{ env.PRODUCT_NAME }}.component"
                    
          workdir=$TMPDIR/VST3
          mkdir -p $workdir
          
          cp -r ~/Library/Audio/Plug-Ins/VST3/$VST3 "$workdir"
          ls -l "$workdir"
          
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -o runtime --deep "$workdir/$VST3"
          codesign -vvv "$workdir/$VST3"
  
          pkgbuild --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" --root "$workdir" --identifier "com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg" --version ${{ env.VERSION }} --install-location "/Library/Audio/Plug-Ins/VST3" "$TMPDIR/${{ env.PRODUCT_NAME }}_VST3.pkg" || exit 1
          pkgutil --check-signature "$TMPDIR/${{ env.PRODUCT_NAME }}_VST3.pkg"
          
          workdir=$TMPDIR/"AU"
          mkdir -p "$workdir"
          
          cp -r ~/Library/Audio/Plug-Ins/Components/$AU "$workdir"
          ls -l "$workdir"
          
          echo "Signing as a bundle"
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -o runtime --deep "$workdir/$AU"
          codesign -vvv "$workdir/$AU"
          
          pkgbuild --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" --root "$workdir" --identifier "com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg" --version ${{ env.VERSION }} --install-location "/Library/Audio/Plug-Ins/Components/" "$TMPDIR/${{ env.PRODUCT_NAME }}_AU.pkg" || exit 1
          pkgutil --check-signature "$TMPDIR/${{ env.PRODUCT_NAME }}_AU.pkg"
          
          rm -rf $workdir
          
          # We have to install the factory presets in a temp location and then move it to the user location with the postinstall script.
          pkgbuild --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" --root "${{ env.OUTPUT_DIR }}/factoryPresets" --identifier "com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg" --version ${{ env.VERSION }} --scripts "${{ env.OUTPUT_DIR }}/ResourcesPackageScript" --install-location "/tmp/${{ env.PRODUCT_NAME }}/factoryPresets/" ${TMPDIR}/factoryPresets.pkg
          
          echo --- Sub Packages Created ---
          ls -l "${TMPDIR}"

#      - name: Add Custom Icons (macOS)
#        if: ${{ matrix.name == 'macOS' }}
#        run: |
#          # add the icns as its own icon resource (meta!)
#          sips -i packaging/playBackEQ.icns
#
#          # Grab the resource, put in tempfile
#          DeRez -only icns packaging/playBackEQ.icns > /tmp/icons
#
#          # Stuff the resource into the strange Icon? file's resource fork
#          Rez -a /tmp/icons -o "${{ env.VST3_PATH }}/Icon"$'\r'
#          Rez -a /tmp/icons -o "${{ env.AU_PATH }}/Icon"$'\r'
#
#          # Set custom icon attribute
#          SetFile -a C "${{ env.VST3_PATH }}"
#          SetFile -a C "${{ env.AU_PATH }}"

      - name : Create distribution file
        if: ${{ matrix.name == 'macOS' }}
        id : create_distro_file
        #        working-directory : ${{github.workspace}}/packaging
        run: |
          
          VST3_PKG_REF='<pkg-ref id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg"/>'
          VST3_CHOICE='<line choice="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg"/>'
          VST3_CHOICE_DEF="<choice id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg\" visible=\"true\" start_selected=\"true\" title=\"${{ env.PRODUCT_NAME }} VST3\"><pkg-ref id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg\"/></choice><pkg-ref id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.vst3.pkg\" version=\"${VERSION}\" onConclusion=\"none\">${{ env.PRODUCT_NAME }}_VST3.pkg</pkg-ref>"
          
          AU_PKG_REF='<pkg-ref id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg"/>'
          AU_CHOICE='<line choice="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg"/>'
          AU_CHOICE_DEF="<choice id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg\" visible=\"true\" start_selected=\"true\" title=\"${{ env.PRODUCT_NAME }} Audio Unit\"><pkg-ref id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg\"/></choice><pkg-ref id=\"com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.component.pkg\" version=\"${VERSION}\" onConclusion=\"none\">${{ env.PRODUCT_NAME }}_AU.pkg</pkg-ref>"
          
          cat > $TMPDIR/distribution.xml << XMLEND
          <?xml version="1.0" encoding="utf-8"?>
          <installer-gui-script minSpecVersion="1">
          <title>${{ env.PRODUCT_NAME }} ${VERSION}</title>
          <license file="License.txt" />
          <readme file="Readme.rtf" />
          
          ${AU_PKG_REF}
          ${VST3_PKG_REF}
          
          <pkg-ref id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg"/>
          <options require-scripts="false" customize="always" hostArchitectures="x86_64,arm64" rootVolumeOnly="true"/>
          <domains enable_anywhere="false" enable_currentUserHome="false" enable_localSystem="true"/>
          <choices-outline>
          ${AU_CHOICE}
          ${VST3_CHOICE}
          
          <line choice="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg"/>
          </choices-outline>
          ${VST3_CHOICE_DEF}
          ${AU_CHOICE_DEF}
          
          <choice id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg" visible="true" enabled="false" selected="true" title="Install Factory Presets">
          <pkg-ref id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg"/>
          </choice>
          <pkg-ref id="com.${{ env.COMPANY_NAME }}.${{ env.PRODUCT_NAME }}.resources.pkg" version="${VERSION}" onConclusion="none">factoryPresets.pkg</pkg-ref>
          </installer-gui-script>
          XMLEND

      - name : Create PKG file
        if: ${{ matrix.name == 'macOS' }}
        id : create_pkg
        #        working-directory : ${{github.workspace}}/packaging
        run: |
          
          pushd ${TMPDIR} || exit
          echo "Building SIGNED PKG"
          productbuild --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" --distribution "distribution.xml" --package-path "." --resources ${{ env.OUTPUT_DIR }} ${{ env.OUTPUT_BASE_FILENAME }} 
          
          popd || exit
          
          SetFile -a C "${TMPDIR}/${{ env.OUTPUT_BASE_FILENAME }}.pkg"
          mkdir "${TMPDIR}/${{ env.PRODUCT_NAME }}"
          mv "${TMPDIR}/${{ env.OUTPUT_BASE_FILENAME }}.pkg" "${TMPDIR}/${{ env.PRODUCT_NAME }}"
          # create a DMG if required
                    
          if [[ -f "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_BASE_FILENAME }}.dmg" ]]; then
          rm "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_BASE_FILENAME }}.dmg"
          fi
          hdiutil create /tmp/tmp.dmg -ov -volname ${{ env.OUTPUT_BASE_FILENAME }} -fs HFS+ -srcfolder "${TMPDIR}/${{ env.PRODUCT_NAME }}/"
          hdiutil convert /tmp/tmp.dmg -format UDZO -o "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_BASE_FILENAME }}.dmg"

#          pkgbuild --component ${{ env.AU_PATH }}  \
#            --install-location /Library/Audio/Plug-Ins/Components \
#            --sign "${{secrets.DEVELOPER_ID_INSTALLER}}" \
#            --identifier com.${{ env.COMPANY_NAME }}.component.pkg
#            ./${{env.PROJECT_NAME}}-AU-unsigned.pkg
#
#          pkgbuild --component ${{ env.VST3_PATH }}  \
#            --install-location /Library/Audio/Plug-Ins/VST3 \
#            --sign "${{secrets.DEVELOPER_ID_INSTALLER}}" \
#            --identifier com.${{ env.COMPANY_NAME }}.vst3.pkg
#            ./${{env.PROJECT_NAME}}-VST3-unsigned.pkg
#
#          productbuild --package ./${{env.PROJECT_NAME}}-AU-unsigned.pkg \
#            --package ./${{env.PROJECT_NAME}}-VST3-unsigned.pkg \
#            --sign "${{secrets.DEVELOPER_ID_INSTALLER}}" \
#            ./${{env.PROJECT_NAME}}-universal.pkg
#
#          echo "PKGNAME=${{env.PROJECT_NAME}}-universal.pkg" >> "$GITHUB_OUTPUT"

      - name : Notarize PKG
        if: ${{ matrix.name == 'macOS' }}
        #        working-directory : ${{github.workspace}}/packaging
        run : |
          
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" --timestamp "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_BASE_FILENAME }}.dmg"
          codesign -vvv "$ARTIFACTS_PATH/${{ env.OUTPUT_BASE_FILENAME }}.dmg"
          
          xcrun notarytool submit "$ARTIFACTS_PATH/${{ env.OUTPUT_BASE_FILENAME }}.dmg" --apple-id "${{ secrets.NOTARIZATION_USERNAME }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.NOTARIZATION_PASSWORD }}" --wait
          xcrun stapler staple "$ARTIFACTS_PATH/${{ env.OUTPUT_BASE_FILENAME }}.dmg"

      - name: Upload plugin
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.create_pkg.outputs.PKGNAME }}
          path: ${{steps.create_pkg.outputs.PKGNAME }}

      - name: Zip
        if: ${{ matrix.name == 'Linux' }}
        working-directory: ${{ env.ARTIFACTS_PATH }}
        run: 7z a -tzip "${{ env.ARTIFACT_NAME }}.zip" "-xr!lib${{ env.PRODUCT_NAME }}_SharedCode.a" .

      - name: Generate Installer
        if: ${{ matrix.name == 'Windows' }}
        run: |
          iscc "${{ env.OUTPUT_DIR }}\installer.iss"
          mv "${{ env.OUTPUT_DIR }}/Output/${{ env.ARTIFACT_NAME }}.exe" "${{ env.ARTIFACTS_PATH }}/"

      - name: Upload Exe (Windows)
        if: ${{ matrix.name == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.exe
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.exe"

      - name: Upload Zip (Linux)
        if: ${{ matrix.name == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"

      - name: Upload DMG (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.dmg
          path: ${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}.dmg

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          # download-artifact puts these files in their own dirs...
          # Using globs sidesteps having to pass the version around
          files: |
            */*.exe
            */*.zip
            */*.dmg
